// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// CalculatorServiceMock is an autogenerated mock type for the Calculator type
type CalculatorServiceMock struct {
	mock.Mock
}

// Calculate provides a mock function with given fields: ctx, operation, a, b
func (_m *CalculatorServiceMock) Calculate(ctx context.Context, operation string, a float64, b float64) (float64, error) {
	ret := _m.Called(ctx, operation, a, b)

	if len(ret) == 0 {
		panic("no return value specified for Calculate")
	}

	var r0 float64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, float64, float64) (float64, error)); ok {
		return rf(ctx, operation, a, b)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, float64, float64) float64); ok {
		r0 = rf(ctx, operation, a, b)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, float64, float64) error); ok {
		r1 = rf(ctx, operation, a, b)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewCalculatorServiceMock creates a new instance of CalculatorServiceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCalculatorServiceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *CalculatorServiceMock {
	mock := &CalculatorServiceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
