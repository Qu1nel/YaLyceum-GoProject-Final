// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	repository "github.com/Qu1nel/YaLyceum-GoProject-Final/internal/orchestrator/repository"
	uuid "github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// TaskRepositoryMock is an autogenerated mock type for the TaskRepository type
type TaskRepositoryMock struct {
	mock.Mock
}

// CreateTask provides a mock function with given fields: ctx, userID, expression
func (_m *TaskRepositoryMock) CreateTask(ctx context.Context, userID uuid.UUID, expression string) (uuid.UUID, error) {
	ret := _m.Called(ctx, userID, expression)

	if len(ret) == 0 {
		panic("no return value specified for CreateTask")
	}

	var r0 uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) (uuid.UUID, error)); ok {
		return rf(ctx, userID, expression)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) uuid.UUID); ok {
		r0 = rf(ctx, userID, expression)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, string) error); ok {
		r1 = rf(ctx, userID, expression)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTaskByID provides a mock function with given fields: ctx, taskID
func (_m *TaskRepositoryMock) GetTaskByID(ctx context.Context, taskID uuid.UUID) (*repository.Task, error) {
	ret := _m.Called(ctx, taskID)

	if len(ret) == 0 {
		panic("no return value specified for GetTaskByID")
	}

	var r0 *repository.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*repository.Task, error)); ok {
		return rf(ctx, taskID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *repository.Task); ok {
		r0 = rf(ctx, taskID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, taskID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTasksByUserID provides a mock function with given fields: ctx, userID
func (_m *TaskRepositoryMock) GetTasksByUserID(ctx context.Context, userID uuid.UUID) ([]repository.Task, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetTasksByUserID")
	}

	var r0 []repository.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]repository.Task, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []repository.Task); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repository.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetTaskError provides a mock function with given fields: ctx, taskID, errorMessage
func (_m *TaskRepositoryMock) SetTaskError(ctx context.Context, taskID uuid.UUID, errorMessage string) error {
	ret := _m.Called(ctx, taskID, errorMessage)

	if len(ret) == 0 {
		panic("no return value specified for SetTaskError")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) error); ok {
		r0 = rf(ctx, taskID, errorMessage)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetTaskResult provides a mock function with given fields: ctx, taskID, result
func (_m *TaskRepositoryMock) SetTaskResult(ctx context.Context, taskID uuid.UUID, result float64) error {
	ret := _m.Called(ctx, taskID, result)

	if len(ret) == 0 {
		panic("no return value specified for SetTaskResult")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, float64) error); ok {
		r0 = rf(ctx, taskID, result)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateTaskStatus provides a mock function with given fields: ctx, taskID, status
func (_m *TaskRepositoryMock) UpdateTaskStatus(ctx context.Context, taskID uuid.UUID, status string) error {
	ret := _m.Called(ctx, taskID, status)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTaskStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) error); ok {
		r0 = rf(ctx, taskID, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewTaskRepositoryMock creates a new instance of TaskRepositoryMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTaskRepositoryMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *TaskRepositoryMock {
	mock := &TaskRepositoryMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
