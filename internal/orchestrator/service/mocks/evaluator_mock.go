// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	ast "github.com/expr-lang/expr/ast"

	mock "github.com/stretchr/testify/mock"
)

// ExpressionEvaluatorMock is an autogenerated mock type for the Evaluator type
type ExpressionEvaluatorMock struct {
	mock.Mock
}

// Evaluate provides a mock function with given fields: ctx, node
func (_m *ExpressionEvaluatorMock) Evaluate(ctx context.Context, node ast.Node) (float64, error) {
	ret := _m.Called(ctx, node)

	if len(ret) == 0 {
		panic("no return value specified for Evaluate")
	}

	var r0 float64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ast.Node) (float64, error)); ok {
		return rf(ctx, node)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ast.Node) float64); ok {
		r0 = rf(ctx, node)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, ast.Node) error); ok {
		r1 = rf(ctx, node)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewExpressionEvaluatorMock creates a new instance of ExpressionEvaluatorMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewExpressionEvaluatorMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *ExpressionEvaluatorMock {
	mock := &ExpressionEvaluatorMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
