// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	orchestrator_grpc "github.com/Qu1nel/YaLyceum-GoProject-Final/proto/gen/orchestrator"
)

// OrchestratorServiceClientMock is an autogenerated mock type for the OrchestratorServiceClient type
type OrchestratorServiceClientMock struct {
	mock.Mock
}

// GetTaskDetails provides a mock function with given fields: ctx, in, opts
func (_m *OrchestratorServiceClientMock) GetTaskDetails(ctx context.Context, in *orchestrator_grpc.TaskDetailsRequest, opts ...grpc.CallOption) (*orchestrator_grpc.TaskDetailsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetTaskDetails")
	}

	var r0 *orchestrator_grpc.TaskDetailsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *orchestrator_grpc.TaskDetailsRequest, ...grpc.CallOption) (*orchestrator_grpc.TaskDetailsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *orchestrator_grpc.TaskDetailsRequest, ...grpc.CallOption) *orchestrator_grpc.TaskDetailsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*orchestrator_grpc.TaskDetailsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *orchestrator_grpc.TaskDetailsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListUserTasks provides a mock function with given fields: ctx, in, opts
func (_m *OrchestratorServiceClientMock) ListUserTasks(ctx context.Context, in *orchestrator_grpc.UserTasksRequest, opts ...grpc.CallOption) (*orchestrator_grpc.UserTasksResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListUserTasks")
	}

	var r0 *orchestrator_grpc.UserTasksResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *orchestrator_grpc.UserTasksRequest, ...grpc.CallOption) (*orchestrator_grpc.UserTasksResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *orchestrator_grpc.UserTasksRequest, ...grpc.CallOption) *orchestrator_grpc.UserTasksResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*orchestrator_grpc.UserTasksResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *orchestrator_grpc.UserTasksRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubmitExpression provides a mock function with given fields: ctx, in, opts
func (_m *OrchestratorServiceClientMock) SubmitExpression(ctx context.Context, in *orchestrator_grpc.ExpressionRequest, opts ...grpc.CallOption) (*orchestrator_grpc.ExpressionResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SubmitExpression")
	}

	var r0 *orchestrator_grpc.ExpressionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *orchestrator_grpc.ExpressionRequest, ...grpc.CallOption) (*orchestrator_grpc.ExpressionResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *orchestrator_grpc.ExpressionRequest, ...grpc.CallOption) *orchestrator_grpc.ExpressionResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*orchestrator_grpc.ExpressionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *orchestrator_grpc.ExpressionRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewOrchestratorServiceClientMock creates a new instance of OrchestratorServiceClientMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrchestratorServiceClientMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *OrchestratorServiceClientMock {
	mock := &OrchestratorServiceClientMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
